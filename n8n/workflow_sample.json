{
  "name": "GmailÂàÜÈ°ûPoC „ÉØ„Éº„ÇØ„Éï„É≠„Éº",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {},
        "options": {}
      },
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// HTML„Çø„Ç∞Èô§Âéª„Å®„ÉÜ„Ç≠„Çπ„ÉàÊ≠£Ë¶èÂåñ\nconst items = $input.all();\n\nreturn items.map(item => {\n  const data = item.json;\n  \n  // HTML„Çø„Ç∞Èô§Âéª\n  const cleanBody = data.textPlain || data.textHtml?.replace(/<[^>]*>/g, '') || '';\n  \n  // Âü∫Êú¨ÁöÑ„Å™Ê≠£Ë¶èÂåñ\n  const normalizedBody = cleanBody\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/\\n+/g, ' ')\n    .trim();\n  \n  return {\n    json: {\n      ...data,\n      subject: data.subject || '',\n      body: normalizedBody,\n      processedAt: new Date().toISOString()\n    }\n  };\n});"
      },
      "name": "Email Preprocessing",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:5000/api/enrich-context",
        "options": {
          "bodyContentType": "json",
          "headers": {
            "item": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "{\n  \"subject\": \"{{ $json.subject }}\",\n  \"body\": \"{{ $json.body }}\"\n}"
      },
      "name": "MCP Context Enricher",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:5000/api/classify",
        "options": {
          "bodyContentType": "json",
          "headers": {
            "item": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        },
        "jsonParameters": true,
        "bodyParametersJson": "{\n  \"subject\": \"{{ $json.subject }}\",\n  \"body\": \"{{ $json.body }}\"\n}"
      },
      "name": "AI Classification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{ $json.classification }}",
              "operation": "equal",
              "value2": "ÈáçË¶Å"
            }
          ]
        }
      },
      "name": "SwitchÂàÜÈ°û",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "functionCode": "// LINEÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê\nconst items = $input.all();\n\nreturn items.map(item => {\n  const classification = $('AI Classification').item.json.classification;\n  const confidence = $('AI Classification').item.json.confidence;\n  const context = $('MCP Context Enricher').item.json.enriched_context;\n  const subject = item.json.subject;\n  \n  const message = `üö® ÈáçË¶Å„É°„Éº„É´Ê§úÂá∫\\n` +\n    `ÂàÜÈ°û: ${classification}\\n` +\n    `‰ø°È†ºÂ∫¶: ${(confidence * 100).toFixed(1)}%\\n` +\n    `‰ª∂Âêç: ${subject}\\n` +\n    `ÊñáËÑà: ${context}`;\n  \n  return {\n    json: {\n      message: message,\n      classification: classification\n    }\n  };\n});"
      },
      "name": "LINE Message Creation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "messageType": "text",
        "text": "={{ $json.message }}",
        "additionalFields": {}
      },
      "name": "LINEÈÄöÁü•",
      "type": "n8n-nodes-base.line",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "sheetId": "YOUR_SHEET_ID",
        "range": "A:F",
        "options": {
          "valueInputMode": "USER_ENTERED"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ new Date().toISOString() }}",
            "subject": "={{ $json.subject }}",
            "classification": "={{ $('AI Classification').item.json.classification }}",
            "confidence": "={{ $('AI Classification').item.json.confidence }}",
            "context": "={{ $('MCP Context Enricher').item.json.enriched_context }}",
            "priority": "={{ $('MCP Context Enricher').item.json.priority_level }}"
          }
        }
      },
      "name": "Google Sheets„É≠„Ç∞‰øùÂ≠ò",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [1340, 400]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Email Preprocessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Preprocessing": {
      "main": [
        [
          {
            "node": "MCP Context Enricher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Context Enricher": {
      "main": [
        [
          {
            "node": "AI Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Classification": {
      "main": [
        [
          {
            "node": "SwitchÂàÜÈ°û",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SwitchÂàÜÈ°û": {
      "main": [
        [
          {
            "node": "LINE Message Creation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Sheets„É≠„Ç∞‰øùÂ≠ò",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Sheets„É≠„Ç∞‰øùÂ≠ò",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LINE Message Creation": {
      "main": [
        [
          {
            "node": "LINEÈÄöÁü•",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "gmail-classifier-workflow"
}